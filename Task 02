import java.util.*;
class Room {
    private int roomNumber;
    private String category;
    private double price;
    private boolean isAvailable;

    public Room(int roomNumber, String category, double price) {
        this.roomNumber = roomNumber;
        this.category = category;
        this.price = price;
        this.isAvailable = true;
    }

    public int getRoomNumber() { return roomNumber; }
    public String getCategory() { return category; }
    public double getPrice() { return price; }
    public boolean isAvailable() { return isAvailable; }

    public void bookRoom() { isAvailable = false; }
    public void cancelBooking() { isAvailable = true; }

    @Override
    public String toString() {
        return "Room " + roomNumber + " [" + category + "] - $" + price + " per night - " + 
               (isAvailable ? "Available" : "Booked");
    }
}

class Reservation {
    private String guestName;
    private Room room;
    private int nights;
    private double totalPrice;

    public Reservation(String guestName, Room room, int nights) {
        this.guestName = guestName;
        this.room = room;
        this.nights = nights;
        this.totalPrice = room.getPrice() * nights;
        room.bookRoom();
    }

    public double getTotalPrice() { return totalPrice; }

    @Override
    public String toString() {
        return "Reservation for: " + guestName + "\nRoom: " + room.getRoomNumber() +
               " (" + room.getCategory() + ")\nNights: " + nights + "\nTotal: $" + totalPrice;
    }
}

class Payment {
    public static boolean processPayment(Scanner scanner, double amount) {
        System.out.println("Your total bill is: $" + amount);
        System.out.print("Enter payment amount: $");
        double payment = scanner.nextDouble();

        if (payment >= amount) {
            System.out.println("Payment successful! Thank you.");
            return true;
        } else {
            System.out.println("Insufficient payment. Booking canceled.");
            return false;
        }
    }
}

public class HotelReservationSystem {
    private static List<Room> rooms = new ArrayList<>();
    private static List<Reservation> reservations = new ArrayList<>();

    public static void main(String[] args) {
        initializeRooms();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\n---- HOTEL RESERVATION SYSTEM ----");
            System.out.println("1. View Available Rooms");
            System.out.println("2. Make a Reservation");
            System.out.println("3. View Reservations");
            System.out.println("4. Exit");
            System.out.print("Enter choice: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    viewAvailableRooms();
                    break;
                case 2:
                    makeReservation(scanner);
                    break;
                case 3:
                    viewReservations();
                    break;
                case 4:
                    System.out.println("Exiting system. Thank you!");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid choice! Please try again.");
            }
        }
    }

    private static void initializeRooms() {
        rooms.add(new Room(101, "Single", 50));
        rooms.add(new Room(102, "Single", 50));
        rooms.add(new Room(201, "Double", 80));
        rooms.add(new Room(202, "Double", 80));
        rooms.add(new Room(301, "Suite", 150));
    }

    private static void viewAvailableRooms() {
        System.out.println("\nAvailable Rooms:");
        for (Room room : rooms) {
            if (room.isAvailable()) {
                System.out.println(room);
            }
        }
    }

    private static void makeReservation(Scanner scanner) {
        System.out.print("\nEnter your name: ");
        scanner.nextLine(); // Consume newline
        String guestName = scanner.nextLine();

        viewAvailableRooms();
        System.out.print("Enter room number to book: ");
        int roomNumber = scanner.nextInt();

        Room selectedRoom = null;
        for (Room room : rooms) {
            if (room.getRoomNumber() == roomNumber && room.isAvailable()) {
                selectedRoom = room;
                break;
            }
        }

        if (selectedRoom == null) {
            System.out.println("Invalid room number or room already booked.");
            return;
        }

        System.out.print("Enter number of nights: ");
        int nights = scanner.nextInt();

        Reservation reservation = new Reservation(guestName, selectedRoom, nights);
        if (Payment.processPayment(scanner, reservation.getTotalPrice())) {
            reservations.add(reservation);
            System.out.println("Reservation successful!");
        } else {
            selectedRoom.cancelBooking();
        }
    }

    private static void viewReservations() {
        if (reservations.isEmpty()) {
            System.out.println("\nNo reservations found.");
            return;
        }
        System.out.println("\nReservations:");
        for (Reservation reservation : reservations) {
            System.out.println(reservation);
        }
    }
}
